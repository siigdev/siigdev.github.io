{"componentChunkName":"component---src-templates-post-js","path":"/blog/optimizing-nextjs-middleware/","result":{"data":{"markdownRemark":{"html":"<h2>Prefixing detected locale</h2>\n<p>By default, Next.js doesn't apply any locale prefixing of directly accessed domains. This means internationalization with automatic locale detection and routing only happens at the top root level. To bypass this the <a href=\"https://nextjs.org/docs/advanced-features/i18n-routing\">official Next.js documentation</a> recommends a workaround using the middleware API.\nThis allows us to manipulate and run code before the requests are fully completed, and by that also handle rerouting the response.</p>\n<p>The documentation does explain the basics very well, so I will not elaborate further on that, but instead focus on some of the problems not being adressed, and how we have solved these in our codebase:</p>\n<ul>\n<li>How can we further do the locale detection from here?</li>\n<li>How can we actually use it without prefixing the default domain?</li>\n</ul>\n<p>For the first question, we are going to take advantage of Accept-Language that is commonly sent by browsers inside the request-headers. For this, the <a href=\"https://www.npmjs.com/package/accept-language\">accept-language NPM library</a> can be used. Within <code>shouldHandleLocale</code> in our _middleware.ts we get the detected language and append it to the locale of the cloned nextUrl request-object. When the object is passed to the NextResponse, Next.js handles the redirection, and the locale gets prefixed onto the URL.</p>\n<pre><code>    acceptLanguage.languages(['en', 'pt', 'fr', 'da'])\n\n    const detectedLang = acceptLanguage.get(\n      request.headers.get('accept-language')\n    )\n\n    if (detectedLang === 'en') return\n\n    newUrl.locale = detectedLang\n    return NextResponse.redirect(newUrl)\n</code></pre>\n<p>For the second question, the additional check of <em>detectedLang</em> equals <em>'en'</em> ensures no redirection from the root domain for the primary language. Be aware, that per default, the get-method of acceptLanguage will fallback to the first element in the list if no locale is matched. The return statement is strictly necessary to avoid any infinite redirection loops.</p>\n<h3>Handle URL encoding</h3>\n<p>While running ads for our website we discovered that quite often the customers would be navigated directly to our 404-page. Upon investigation is was discovered that some of our ad-platforms (noticeably Instagram) ASCII encodes their URLS. In short, this would end up with <code>?queryParam=value</code> turning into <code>%3FqueryParam%3Dvalue</code>.</p>\n<p>Quite simply this can be solved with a javascript <code>replace</code> inside our _middleware as shown below.</p>\n<pre><code>   const replaceChars = (href) => {\n     const decodedHref = href\n       .replace('%3F', '?')\n       .replace('%3D', '=')\n       .replace('%26', '&#x26;')\n     return decodedHref\n   }\n   ...\n   return NextResponse.redirect(replaceChars(href))\n</code></pre>","frontmatter":{"date":"06-22-2022","title":"Handling Next.js middleware i18 routing"},"fields":{"slug":"optimizing-nextjs-middleware"}}},"pageContext":{"slug":"optimizing-nextjs-middleware"}},"staticQueryHashes":["63159454"],"slicesMap":{}}